// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: connection.proto

package connection

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_NEW_CONNECTION MessageType = 0
	MessageType_DATA           MessageType = 1
	MessageType_CLOSE          MessageType = 2
	MessageType_ERROR          MessageType = 3
	MessageType_HEARTBEAT      MessageType = 4
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "NEW_CONNECTION",
		1: "DATA",
		2: "CLOSE",
		3: "ERROR",
		4: "HEARTBEAT",
	}
	MessageType_value = map[string]int32{
		"NEW_CONNECTION": 0,
		"DATA":           1,
		"CLOSE":          2,
		"ERROR":          3,
		"HEARTBEAT":      4,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_connection_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{0}
}

type HTTPMessage struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      MessageType            `protobuf:"varint,1,opt,name=type,proto3,enum=connection.MessageType" json:"type,omitempty"`
	JwtToken  string                 `protobuf:"bytes,2,opt,name=jwtToken,proto3" json:"jwtToken,omitempty"`
	ApiKey    string                 `protobuf:"bytes,3,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ConnId    string                 `protobuf:"bytes,4,opt,name=connId,proto3" json:"connId,omitempty"`
	ErrorData string                 `protobuf:"bytes,5,opt,name=errorData,proto3" json:"errorData,omitempty"`
	RawData   []byte                 `protobuf:"bytes,6,opt,name=rawData,proto3" json:"rawData,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*HTTPMessage_Request
	//	*HTTPMessage_Response
	Payload       isHTTPMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPMessage) Reset() {
	*x = HTTPMessage{}
	mi := &file_connection_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPMessage) ProtoMessage() {}

func (x *HTTPMessage) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPMessage.ProtoReflect.Descriptor instead.
func (*HTTPMessage) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{0}
}

func (x *HTTPMessage) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_NEW_CONNECTION
}

func (x *HTTPMessage) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

func (x *HTTPMessage) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *HTTPMessage) GetConnId() string {
	if x != nil {
		return x.ConnId
	}
	return ""
}

func (x *HTTPMessage) GetErrorData() string {
	if x != nil {
		return x.ErrorData
	}
	return ""
}

func (x *HTTPMessage) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *HTTPMessage) GetPayload() isHTTPMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *HTTPMessage) GetRequest() *HTTPRequestData {
	if x != nil {
		if x, ok := x.Payload.(*HTTPMessage_Request); ok {
			return x.Request
		}
	}
	return nil
}

func (x *HTTPMessage) GetResponse() *HTTPResponseData {
	if x != nil {
		if x, ok := x.Payload.(*HTTPMessage_Response); ok {
			return x.Response
		}
	}
	return nil
}

type isHTTPMessage_Payload interface {
	isHTTPMessage_Payload()
}

type HTTPMessage_Request struct {
	Request *HTTPRequestData `protobuf:"bytes,7,opt,name=request,proto3,oneof"`
}

type HTTPMessage_Response struct {
	Response *HTTPResponseData `protobuf:"bytes,8,opt,name=response,proto3,oneof"`
}

func (*HTTPMessage_Request) isHTTPMessage_Payload() {}

func (*HTTPMessage_Response) isHTTPMessage_Payload() {}

type HTTPRequestData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Method        string                 `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Query         string                 `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          []byte                 `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	HttpVersion   string                 `protobuf:"bytes,6,opt,name=httpVersion,proto3" json:"httpVersion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequestData) Reset() {
	*x = HTTPRequestData{}
	mi := &file_connection_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestData) ProtoMessage() {}

func (x *HTTPRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestData.ProtoReflect.Descriptor instead.
func (*HTTPRequestData) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPRequestData) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPRequestData) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPRequestData) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *HTTPRequestData) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPRequestData) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HTTPRequestData) GetHttpVersion() string {
	if x != nil {
		return x.HttpVersion
	}
	return ""
}

type HTTPResponseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    int32                  `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	StatusText    string                 `protobuf:"bytes,2,opt,name=statusText,proto3" json:"statusText,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          []byte                 `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	HttpVersion   string                 `protobuf:"bytes,5,opt,name=httpVersion,proto3" json:"httpVersion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPResponseData) Reset() {
	*x = HTTPResponseData{}
	mi := &file_connection_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseData) ProtoMessage() {}

func (x *HTTPResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseData.ProtoReflect.Descriptor instead.
func (*HTTPResponseData) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{2}
}

func (x *HTTPResponseData) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPResponseData) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *HTTPResponseData) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPResponseData) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HTTPResponseData) GetHttpVersion() string {
	if x != nil {
		return x.HttpVersion
	}
	return ""
}

type TCPMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          MessageType            `protobuf:"varint,1,opt,name=type,proto3,enum=connection.MessageType" json:"type,omitempty"`
	JwtToken      string                 `protobuf:"bytes,2,opt,name=jwtToken,proto3" json:"jwtToken,omitempty"`
	ApiKey        string                 `protobuf:"bytes,3,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ConnId        string                 `protobuf:"bytes,4,opt,name=connId,proto3" json:"connId,omitempty"`
	ErrorData     string                 `protobuf:"bytes,5,opt,name=errorData,proto3" json:"errorData,omitempty"`
	Data          []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Meta          *TCPReqData            `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPMessage) Reset() {
	*x = TCPMessage{}
	mi := &file_connection_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPMessage) ProtoMessage() {}

func (x *TCPMessage) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPMessage.ProtoReflect.Descriptor instead.
func (*TCPMessage) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{3}
}

func (x *TCPMessage) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_NEW_CONNECTION
}

func (x *TCPMessage) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

func (x *TCPMessage) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *TCPMessage) GetConnId() string {
	if x != nil {
		return x.ConnId
	}
	return ""
}

func (x *TCPMessage) GetErrorData() string {
	if x != nil {
		return x.ErrorData
	}
	return ""
}

func (x *TCPMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TCPMessage) GetMeta() *TCPReqData {
	if x != nil {
		return x.Meta
	}
	return nil
}

type TCPReqData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetHost    string                 `protobuf:"bytes,1,opt,name=targetHost,proto3" json:"targetHost,omitempty"`
	TargetPort    int32                  `protobuf:"varint,2,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	ClientIp      string                 `protobuf:"bytes,3,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPReqData) Reset() {
	*x = TCPReqData{}
	mi := &file_connection_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPReqData) ProtoMessage() {}

func (x *TCPReqData) ProtoReflect() protoreflect.Message {
	mi := &file_connection_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPReqData.ProtoReflect.Descriptor instead.
func (*TCPReqData) Descriptor() ([]byte, []int) {
	return file_connection_proto_rawDescGZIP(), []int{4}
}

func (x *TCPReqData) GetTargetHost() string {
	if x != nil {
		return x.TargetHost
	}
	return ""
}

func (x *TCPReqData) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *TCPReqData) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

var File_connection_proto protoreflect.FileDescriptor

const file_connection_proto_rawDesc = "" +
	"\n" +
	"\x10connection.proto\x12\n" +
	"connection\"\xbe\x02\n" +
	"\vHTTPMessage\x12+\n" +
	"\x04type\x18\x01 \x01(\x0e2\x17.connection.MessageTypeR\x04type\x12\x1a\n" +
	"\bjwtToken\x18\x02 \x01(\tR\bjwtToken\x12\x16\n" +
	"\x06apiKey\x18\x03 \x01(\tR\x06apiKey\x12\x16\n" +
	"\x06connId\x18\x04 \x01(\tR\x06connId\x12\x1c\n" +
	"\terrorData\x18\x05 \x01(\tR\terrorData\x12\x18\n" +
	"\arawData\x18\x06 \x01(\fR\arawData\x127\n" +
	"\arequest\x18\a \x01(\v2\x1b.connection.HTTPRequestDataH\x00R\arequest\x12:\n" +
	"\bresponse\x18\b \x01(\v2\x1c.connection.HTTPResponseDataH\x00R\bresponseB\t\n" +
	"\apayload\"\x89\x02\n" +
	"\x0fHTTPRequestData\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x14\n" +
	"\x05query\x18\x03 \x01(\tR\x05query\x12B\n" +
	"\aheaders\x18\x04 \x03(\v2(.connection.HTTPRequestData.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x05 \x01(\fR\x04body\x12 \n" +
	"\vhttpVersion\x18\x06 \x01(\tR\vhttpVersion\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x89\x02\n" +
	"\x10HTTPResponseData\x12\x1e\n" +
	"\n" +
	"statusCode\x18\x01 \x01(\x05R\n" +
	"statusCode\x12\x1e\n" +
	"\n" +
	"statusText\x18\x02 \x01(\tR\n" +
	"statusText\x12C\n" +
	"\aheaders\x18\x03 \x03(\v2).connection.HTTPResponseData.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x04 \x01(\fR\x04body\x12 \n" +
	"\vhttpVersion\x18\x05 \x01(\tR\vhttpVersion\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe3\x01\n" +
	"\n" +
	"TCPMessage\x12+\n" +
	"\x04type\x18\x01 \x01(\x0e2\x17.connection.MessageTypeR\x04type\x12\x1a\n" +
	"\bjwtToken\x18\x02 \x01(\tR\bjwtToken\x12\x16\n" +
	"\x06apiKey\x18\x03 \x01(\tR\x06apiKey\x12\x16\n" +
	"\x06connId\x18\x04 \x01(\tR\x06connId\x12\x1c\n" +
	"\terrorData\x18\x05 \x01(\tR\terrorData\x12\x12\n" +
	"\x04data\x18\x06 \x01(\fR\x04data\x12*\n" +
	"\x04meta\x18\a \x01(\v2\x16.connection.TCPReqDataR\x04meta\"h\n" +
	"\n" +
	"TCPReqData\x12\x1e\n" +
	"\n" +
	"targetHost\x18\x01 \x01(\tR\n" +
	"targetHost\x12\x1e\n" +
	"\n" +
	"targetPort\x18\x02 \x01(\x05R\n" +
	"targetPort\x12\x1a\n" +
	"\bclientIp\x18\x03 \x01(\tR\bclientIp*P\n" +
	"\vMessageType\x12\x12\n" +
	"\x0eNEW_CONNECTION\x10\x00\x12\b\n" +
	"\x04DATA\x10\x01\x12\t\n" +
	"\x05CLOSE\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x03\x12\r\n" +
	"\tHEARTBEAT\x10\x042\x98\x01\n" +
	"\rTunnelService\x12D\n" +
	"\n" +
	"HTTPTunnel\x12\x17.connection.HTTPMessage\x1a\x17.connection.HTTPMessage\"\x00(\x010\x01\x12A\n" +
	"\tTCPTunnel\x12\x16.connection.TCPMessage\x1a\x16.connection.TCPMessage\"\x00(\x010\x01B\x14Z\x12./proto;connectionb\x06proto3"

var (
	file_connection_proto_rawDescOnce sync.Once
	file_connection_proto_rawDescData []byte
)

func file_connection_proto_rawDescGZIP() []byte {
	file_connection_proto_rawDescOnce.Do(func() {
		file_connection_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_connection_proto_rawDesc), len(file_connection_proto_rawDesc)))
	})
	return file_connection_proto_rawDescData
}

var file_connection_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_connection_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_connection_proto_goTypes = []any{
	(MessageType)(0),         // 0: connection.MessageType
	(*HTTPMessage)(nil),      // 1: connection.HTTPMessage
	(*HTTPRequestData)(nil),  // 2: connection.HTTPRequestData
	(*HTTPResponseData)(nil), // 3: connection.HTTPResponseData
	(*TCPMessage)(nil),       // 4: connection.TCPMessage
	(*TCPReqData)(nil),       // 5: connection.TCPReqData
	nil,                      // 6: connection.HTTPRequestData.HeadersEntry
	nil,                      // 7: connection.HTTPResponseData.HeadersEntry
}
var file_connection_proto_depIdxs = []int32{
	0, // 0: connection.HTTPMessage.type:type_name -> connection.MessageType
	2, // 1: connection.HTTPMessage.request:type_name -> connection.HTTPRequestData
	3, // 2: connection.HTTPMessage.response:type_name -> connection.HTTPResponseData
	6, // 3: connection.HTTPRequestData.headers:type_name -> connection.HTTPRequestData.HeadersEntry
	7, // 4: connection.HTTPResponseData.headers:type_name -> connection.HTTPResponseData.HeadersEntry
	0, // 5: connection.TCPMessage.type:type_name -> connection.MessageType
	5, // 6: connection.TCPMessage.meta:type_name -> connection.TCPReqData
	1, // 7: connection.TunnelService.HTTPTunnel:input_type -> connection.HTTPMessage
	4, // 8: connection.TunnelService.TCPTunnel:input_type -> connection.TCPMessage
	1, // 9: connection.TunnelService.HTTPTunnel:output_type -> connection.HTTPMessage
	4, // 10: connection.TunnelService.TCPTunnel:output_type -> connection.TCPMessage
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_connection_proto_init() }
func file_connection_proto_init() {
	if File_connection_proto != nil {
		return
	}
	file_connection_proto_msgTypes[0].OneofWrappers = []any{
		(*HTTPMessage_Request)(nil),
		(*HTTPMessage_Response)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_connection_proto_rawDesc), len(file_connection_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_connection_proto_goTypes,
		DependencyIndexes: file_connection_proto_depIdxs,
		EnumInfos:         file_connection_proto_enumTypes,
		MessageInfos:      file_connection_proto_msgTypes,
	}.Build()
	File_connection_proto = out.File
	file_connection_proto_goTypes = nil
	file_connection_proto_depIdxs = nil
}
